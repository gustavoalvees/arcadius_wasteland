name: Release Automática

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Excluir release/tag 'desktop' se já existir
        uses: actions/github-script@v7
        with:
          script: |
            const tag = 'desktop';
            const { owner, repo } = context.repo;

            // Tentar excluir release associada à tag 'desktop'
            try {
              const release = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              await github.rest.repos.deleteRelease({ owner, repo, release_id: release.data.id });
              console.log(`Release '${tag}' excluída.`);
            } catch (err) {
              console.log(`Nenhuma release '${tag}' para excluir ou erro:`, err.message);
            }

            // Tentar excluir a tag 'desktop'
            try {
              await github.rest.git.deleteRef({ owner, repo, ref: 'tags/' + tag });
              console.log(`Tag '${tag}' excluída.`);
            } catch (err) {
              console.log(`Nenhuma tag '${tag}' para excluir ou erro:`, err.message);
            }

      - name: Configurar git e criar nova tag 'desktop'
        env:
          TOKEN: ${{ secrets.TES }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}
          git fetch --tags
          git tag desktop
          git push origin desktop

      - name: Criar arquivo ZIP do projeto
        run: |
          zip -r projeto.zip . -x '*.git*' '*.github*'

      - name: Criar nova release 'Desktop'
        uses: softprops/action-gh-release@v1
        with:
          name: Desktop
          tag_name: desktop
          files: projeto.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
